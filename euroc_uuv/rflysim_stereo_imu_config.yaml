%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "/rflysim/imu"
image0_topic: "/rflysim/sensor0/img_gray"
image1_topic: "/rflysim/sensor1/img_gray"
output_path: "/home/vins_map"

cam0_calib: "cam0_mei.yaml"
cam1_calib: "cam1_mei.yaml"
image_width: 640
image_height: 480
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0,0,1, 0.5,
           1,0,0, -0.035,
           0,1,0, 0.3,
          0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [0,0,1, 0.5,
           1,0,0, 0.035,
           0,1,0, 0.3,
          0, 0, 0, 1]

#body_T_cam0: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [ -3.0704736263318377e-03, -3.8249007469711160e-03,
#          9.9998797109064541e-01, 3.0547184443448555e-01,
#          9.9999255840231571e-01, -2.3474033565764607e-03,
#          3.0615090188649829e-03, 8.4097176282457220e-02,
#          2.3356651517412175e-03, 9.9998992986517465e-01,
#          3.8320799236954972e-03, -1.0691479383226050e-01, 0., 0., 0., 1. ]
#body_T_cam1: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [ -3.3499871037809825e-03, -3.7929730428006847e-03,
#          9.9998719538897163e-01, 3.0569702772427554e-01,
#          9.9999181412234128e-01, -2.2819041972397258e-03,
#          3.3413472647420006e-03, 1.2633098470127757e-01,
#          2.2692013382421550e-03, 9.9999020308637598e-01,
#          3.8005863436201270e-03, -1.0674634719305874e-01, 0., 0., 0., 1. ]
#body_T_cam0: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [0, -1, 0, 0.3,
#         1, 0, 0,-0.025,
#         0, 0, 1, 0,
#         0, 0, 0, 1]
#
#body_T_cam1: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [0, -1, 0, 0.3,
#         1, 0, 0,0.025,
#         0, 0, 1, 0,
#         0, 0, 0, 1]
#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 100                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. 
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
